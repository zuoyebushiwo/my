设计原则：
1.找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。
2.针对接口编程，而不是针对实现编程。
3.为了交互对象之间的松耦合设计而努力。
3.多用组合，少用继承。
4.开放关闭原则：类应该对扩展开放，对修改关闭。
5.依赖倒置原则：要依赖抽象，不要依赖具体类
6.最少知识原则：只和你的密友谈话

一、策略模式：
	
	在对象运行期间，加入特性。比如鸭子

二、观察者模式：

	在对象之间定义了一对多的依赖。这样一来，当一个对象改变状态，
	依赖它的对象会接到通知，并自动更新。

三、装饰者模式：

	动态将责任附加到对象上。
	若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

四、工厂方法模式：

	定义了一个创建对象的接口，但由子类决定实例化的类是哪一个。
	工厂方法让类把实例化推迟到子类。
	
五、单例模式：
		
		确保一个类只有一个实例，并提供全局访问点。
		
六、命令模式：

	将"请求"封装成对象、以便使用不同的请求、
	
	队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。		
	
七、适配器模式：

	将一个类的接口，转换成客户期望另一个接口，适配器
	
	让原本不兼容的类可以合作无间。
	
八、外观模式：

	提供了一个统一的接口。用来访问子系统中的一群接口。
	
	外观定义了一个高层接口。让子系统更容易使用。